/*!
 * HooksJS - The set of hooks  (https://github.com/olton/hooks)
 * Copyright 2024 by Serhii Pimenov
 * Licensed under MIT
 !*/
var Hooks=function(e){"use strict";const t=[];let r=-1;var o;e.EVENTS=void 0,(o=e.EVENTS||(e.EVENTS={})).LOAD="load",o.VIEWPORT="viewport",o.ATTRIBUTE="attribute",o.CHILDREN="children",o.DATA="data";return e.info=()=>{console.info("%c Hooks %c v0.10.0 %c 09.07.2024, 13:04:50 ","color: #ffffff; font-weight: bold; background: #5c2c05","color: white; background: darkgreen","color: white; background: #0080fe;")},e.useCompose=(...e)=>t=>e.reduceRight(((e,t)=>t(e)),t),e.useCurry=e=>function curried(...t){return t.length>=e.length?e.apply(this,t):function(...e){return curried.apply(this,t.concat(e))}},e.useDebounce=(e,t)=>{let r;return function(...o){clearTimeout(r),r=setTimeout((()=>{e.apply(this,o)}),t)}},e.useEvent=({event:t,root:r,target:o,effect:n})=>{const s="string"==typeof o?document.querySelector(o):o;if("function"!=typeof n)throw Error("Side effect must be a function!");if(!s)throw Error("Please specify a target element!");switch(t){case e.EVENTS.LOAD:new MutationObserver(((e,t)=>{const r=document.querySelector(o);null!==r&&(n(r),t.disconnect())})).observe(document.body,{childList:!0,subtree:!0});break;case e.EVENTS.VIEWPORT:{const e=r instanceof HTMLElement?r:"string"==typeof r?document.querySelector(r):null;new IntersectionObserver(((e,t)=>{for(const t of e)t.isIntersecting&&n(s)}),{root:e,rootMargin:"0px",threshold:.5}).observe(s);break}case e.EVENTS.ATTRIBUTE:new MutationObserver((e=>{for(const t of e)t.target===s&&"attributes"===t.type&&n(s,t.attributeName,s.getAttribute(t.attributeName))})).observe(s,{attributes:!0});break;case e.EVENTS.CHILDREN:new MutationObserver((e=>{for(const t of e)t.target===s&&"childList"===t.type&&n(s,t.addedNodes,t.removedNodes)})).observe(s,{childList:!0,subtree:!0});break;case e.EVENTS.DATA:new MutationObserver((e=>{for(const t of e)t.target===s&&"characterData"===t.type&&n(s,s.textContent)})).observe(s,{characterData:!0});break;default:s instanceof HTMLElement&&s.addEventListener(t,(e=>{n(s,e)}))}},e.useMemo=e=>{const t=new Map;return(...r)=>{const o=`${r.length}${r.join("+")}`;if(t.has(o))return t.get(o);const n=e.apply(null,r);return t.set(o,n),n}},e.usePipe=(...e)=>t=>e.reduce(((e,t)=>t(e)),t),e.useState=(e,o)=>{const n=r++;t[n]={value:e};return[t[n],e=>{const r=t[n].value;t[n].value="function"==typeof e?e(r):e,"function"==typeof o&&o(t[n].value,r)}]},e.useThrottle=(e,t)=>{let r,o,n=!1;return function wrapper(...s){if(n)return r=this,void(o=s);e.apply(this,s),n=!0,setTimeout((()=>{o&&(wrapper.apply(r,o),o=r=null)}),t)}},e}({});
